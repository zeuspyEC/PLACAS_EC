# ==========================================
# ECPlacas 2.0 - GitHub Actions CI/CD Pipeline
# Proyecto: Construcción de Software - EPN
# Desarrollado por: Erick Costa
# Enfoque: Rendimiento | Sostenibilidad | Escalabilidad
# ==========================================

name: 🚀 ECPlacas 2.0 - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ecplacas-epn

jobs:
  # ==========================================
  # JOB 1: SETUP Y VALIDACIÓN
  # ==========================================
  setup:
    name: 🔧 Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup.outputs.python-version }}
      cache-key: ${{ steps.setup.outputs.cache-key }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ⚙️ Setup Python
      id: setup
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 💾 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          .pytest_cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📋 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: ✅ Validate Project Structure
      run: |
        python -c "
        import os
        required_files = ['backend/app.py', 'frontend/index.html', 'requirements.txt']
        missing = [f for f in required_files if not os.path.exists(f)]
        if missing:
            print(f'❌ Missing files: {missing}')
            exit(1)
        print('✅ Project structure valid')
        "

  # ==========================================
  # JOB 2: COMPILACIÓN
  # ==========================================
  compilation:
    name: 🔨 Compilation & Syntax Check
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 💾 Restore Cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: 📋 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔨 Compile Python Files
      run: |
        echo "🔨 Compiling backend modules..."
        python -m py_compile backend/app.py
        python -m py_compile backend/db.py
        python -m py_compile backend/utils.py
        python -m py_compile ECPlacas.py
        echo "✅ Compilation successful"

    - name: 🔍 Import Validation
      run: |
        echo "🔍 Validating imports..."
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        python -c "
        import sys, os
        sys.path.insert(0, os.path.join(os.getcwd(), 'backend'))
        try:
            import app, db, utils
            print('✅ All imports successful')
        except Exception as e:
            print(f'❌ Import error: {e}')
            sys.exit(1)
        "

  # ==========================================
  # JOB 3: LINTING Y CALIDAD DE CÓDIGO
  # ==========================================
  linting:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 💾 Restore Cache
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: 📋 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort bandit mypy

    - name: 🔍 Flake8 Analysis
      run: |
        echo "🔍 Running Flake8..."
        flake8 backend/ --config=.flake8 --output-file=flake8-report.txt
        echo "✅ Flake8 passed"

    - name: ⚫ Black Formatting Check
      run: |
        echo "⚫ Checking Black formatting..."
        black --check backend/ || (echo "❌ Code needs formatting. Run: black backend/" && exit 1)
        echo "✅ Black formatting OK"

    - name: 📦 Import Sorting Check
      run: |
        echo "📦 Checking import sorting..."
        isort --check-only backend/ || (echo "❌ Imports need sorting. Run: isort backend/" && exit 1)
        echo "✅ Import sorting OK"

    - name: 🔒 Security Analysis
      run: |
        echo "🔒 Running security analysis..."
        bandit -r backend/ -f json -o bandit-report.json
        echo "✅ Security analysis complete"

    - name: 📊 Upload Linting Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: linting-reports
        path: |
          flake8-report.txt
          bandit-report.json

  # ==========================================
  # JOB 4: TESTING COMPREHENSIVO
  # ==========================================
  testing:
    name: 🧪 Comprehensive Testing Suite
    runs-on: ubuntu-latest
    needs: [setup, compilation]
    strategy:
      matrix:
        test-type: [unit, integration, performance]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 💾 Restore Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          .pytest_cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: 📋 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-asyncio httpx

    - name: 🧪 Run Tests - ${{ matrix.test-type }}
      run: |
        case "${{ matrix.test-type }}" in
          unit)
            echo "🧪 Running unit tests..."
            pytest tests/ -v --cov=backend --cov-report=xml --cov-report=html -m "not integration and not performance"
            ;;
          integration)
            echo "🔗 Running integration tests..."
            pytest tests/ -v -m "integration"
            ;;
          performance)
            echo "⚡ Running performance tests..."
            pytest tests/ -v -m "performance" --benchmark-only
            ;;
        esac

    - name: 📊 Upload Coverage Reports
      uses: actions/upload-artifact@v3
      if: matrix.test-type == 'unit'
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

    - name: 📈 Coverage Comment
      uses: py-cov-action/python-coverage-comment-action@v3
      if: matrix.test-type == 'unit' && github.event_name == 'pull_request'
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==========================================
  # JOB 5: DOCKER BUILD Y SEGURIDAD
  # ==========================================
  docker:
    name: 🐳 Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [compilation, linting]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=2.0.1
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🔒 Run Security Scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📊 Upload Security Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ==========================================
  # JOB 6: DEPLOY (Solo en push a main)
  # ==========================================
  deploy:
    name: 🚀 Deploy to Environment
    runs-on: ubuntu-latest
    needs: [testing, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://ecplacas.erickcosta.dev
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Build and Push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:v2.0.1
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=2.0.1

    - name: 📝 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v2.0.1-${{ github.run_number }}
        release_name: 🚀 ECPlacas 2.0.1 - Build ${{ github.run_number }}
        body: |
          ## 🎉 ECPlacas 2.0 - Release Automático
          
          ### 📊 Métricas de Calidad
          - ✅ Compilación: Exitosa
          - ✅ Tests: Pasando (${{ needs.testing.result }})
          - ✅ Linting: OK (${{ needs.linting.result }})
          - ✅ Docker: Construido (${{ needs.docker.result }})
          
          ### 🔗 Links Útiles
          - [📊 Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [🐳 Docker Image](${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest)
          
          **Commit:** ${{ github.sha }}
          **Autor:** ${{ github.actor }}
        draft: false
        prerelease: false

  # ==========================================
  # JOB 7: NOTIFICACIONES Y REPORTES
  # ==========================================
  notification:
    name: 📢 Notifications & Reports
    runs-on: ubuntu-latest
    needs: [compilation, linting, testing, docker]
    if: always()
    
    steps:
    - name: 📊 Generate Status Report
      run: |
        echo "## 📊 ECPlacas 2.0 - Pipeline Status Report" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔨 Compilation | ${{ needs.compilation.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 Linting | ${{ needs.linting.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Testing | ${{ needs.testing.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "| 🐳 Docker | ${{ needs.docker.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

    - name: 📝 Comment PR (if applicable)
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const results = {
            compilation: '${{ needs.compilation.result }}',
            linting: '${{ needs.linting.result }}',
            testing: '${{ needs.testing.result }}',
            docker: '${{ needs.docker.result }}'
          };
          
          const statusEmoji = (status) => status === 'success' ? '✅' : '❌';
          
          const comment = `## 🚀 ECPlacas 2.0 - CI/CD Results
          
          | Check | Status |
          |-------|--------|
          | 🔨 Compilation | ${statusEmoji(results.compilation)} ${results.compilation} |
          | 🔍 Linting | ${statusEmoji(results.linting)} ${results.linting} |
          | 🧪 Testing | ${statusEmoji(results.testing)} ${results.testing} |
          | 🐳 Docker | ${statusEmoji(results.docker)} ${results.docker} |
          
          **Ready for merge:** ${Object.values(results).every(r => r === 'success') ? '✅ Yes' : '❌ No'}`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });