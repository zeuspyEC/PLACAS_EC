name: 🚀 ECPlacas 2.0 - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ecplacas-epn

jobs:
  setup:
    name: 🔧 Setup & Validation
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.setup.outputs.python-version }}
      cache-key: ${{ steps.setup.outputs.cache-key }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ⚙️ Setup Python
      id: setup
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 💾 Cache Dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          .pytest_cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📋 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: ✅ Validate Project Structure
      run: |
        python -c "import os; required=['backend/app.py', 'frontend/index.html', 'requirements.txt']; missing=[f for f in required if not os.path.exists(f)]; print('Missing:', missing) if missing else print('Project structure valid'); exit(1) if missing else exit(0)"

  compilation:
    name: 🔨 Compilation & Syntax Check
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 💾 Restore Cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: 📋 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔧 Configure Environment
      run: |
        export PYTHONIOENCODING=utf-8
        export LC_ALL=C.UTF-8
        export LANG=C.UTF-8

    - name: 🔨 Compile Python Files
      run: |
        echo "Compiling backend modules..."
        python -m py_compile backend/app.py
        python -m py_compile backend/db.py
        python -m py_compile backend/utils.py
        python -m py_compile ECPlacas.py
        echo "Compilation successful"

    - name: 🔍 Import Validation
      run: |
        echo "Validating imports..."
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        cd backend && python -c "import db, utils; print('All imports successful')"

  linting:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📋 Install Linting Tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort bandit

    - name: 🔍 Flake8 Analysis
      run: |
        echo "Running Flake8..."
        flake8 backend/ --config=.flake8 --output-file=flake8-report.txt || true
        echo "Flake8 completed"

    - name: ⚫ Black Formatting Check
      run: |
        echo "Checking Black formatting..."
        black backend/ --diff --color || true
        echo "Black formatting check completed"

    - name: 📦 Import Sorting Check
      run: |
        echo "Checking import sorting..."
        isort backend/ --diff --color || true
        echo "Import sorting check completed"

    - name: 🔒 Security Analysis
      run: |
        echo "Running security analysis..."
        bandit -r backend/ -f json -o bandit-report.json || true
        echo "Security analysis completed"

    - name: 📊 Upload Linting Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: linting-reports
        path: |
          flake8-report.txt
          bandit-report.json

  testing:
    name: 🧪 Comprehensive Testing Suite
    runs-on: ubuntu-latest
    needs: [setup, compilation]
    strategy:
      matrix:
        test-type: [unit, integration, performance]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 💾 Restore Cache
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          .pytest_cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: 📋 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock pytest-asyncio httpx

    - name: 🧪 Run Tests - ${{ matrix.test-type }}
      run: |
        case "${{ matrix.test-type }}" in
          unit)
            echo "Running unit tests..."
            pytest tests/ -v --tb=short || true
            ;;
          integration)
            echo "Running integration tests..."
            pytest tests/ -v -m "integration" || true
            ;;
          performance)
            echo "Running performance tests..."
            pytest tests/ -v -m "performance" || true
            ;;
        esac

    - name: 📊 Upload Coverage Reports
      uses: actions/upload-artifact@v4
      if: matrix.test-type == 'unit'
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

  docker:
    name: 🐳 Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: [compilation, linting]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: |
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        build-args: |
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=2.0.1
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: 🚀 Deploy to Environment
    runs-on: ubuntu-latest
    needs: [testing, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: 
      name: production
      url: https://ecplacas.erickcosta.dev
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 📝 Create Deployment Summary
      run: |
        echo "## 🎉 ECPlacas 2.0 - Production Deployment" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** 2.0.1" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ✅ Deployed Successfully" >> $GITHUB_STEP_SUMMARY

  notification:
    name: 📢 Notifications & Reports
    runs-on: ubuntu-latest
    needs: [compilation, linting, testing, docker]
    if: always()
    
    steps:
    - name: 📊 Generate Status Report
      run: |
        echo "## 📊 ECPlacas 2.0 - Pipeline Status Report" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔨 Compilation | ${{ needs.compilation.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 Linting | ${{ needs.linting.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Testing | ${{ needs.testing.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "| 🐳 Docker | ${{ needs.docker.result }} | - |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
