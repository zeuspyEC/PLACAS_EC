name: 🚀 ECPlacas 2.0 - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

jobs:
  setup:
    name: 🔧 Setup & Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 💾 Cache Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: 📋 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  compilation:
    name: 🔨 Compilation & Syntax Check
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 💾 Restore Cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: 📋 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🔧 Fix Encoding
      run: |
        export PYTHONIOENCODING=utf-8
        export LC_ALL=C.UTF-8
        export LANG=C.UTF-8

    - name: 🔨 Compile Python Files
      run: |
        echo "Compiling backend modules..."
        python -m py_compile backend/app.py
        python -m py_compile backend/db.py
        python -m py_compile backend/utils.py
        python -m py_compile ECPlacas.py
        echo "Compilation successful"

    - name: 🔍 Import Validation
      run: |
        echo "Validating imports..."
        export PYTHONPATH="${PYTHONPATH}:$(pwd)"
        python -c "
import sys, os
sys.path.insert(0, os.path.join(os.getcwd(), 'backend'))
try:
    import db, utils
    print('All imports successful')
except Exception as e:
    print(f'Import error: {e}')
    sys.exit(1)
"

  linting:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📋 Install Linting Tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort bandit

    - name: 🔍 Flake8 Analysis
      run: |
        echo "Running Flake8..."
        flake8 backend/ --config=.flake8 --output-file=flake8-report.txt || true
        echo "Flake8 completed"

    - name: ⚫ Black Formatting
      run: |
        echo "Formatting with Black..."
        black backend/ --diff --color || true
        echo "Black formatting completed"

    - name: 📦 Import Sorting
      run: |
        echo "Sorting imports with isort..."
        isort backend/ --diff --color || true
        echo "Import sorting completed"

    - name: 📊 Upload Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: linting-reports
        path: flake8-report.txt

  testing:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    needs: [compilation]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: ⚙️ Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📋 Install Test Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: 🧪 Run Tests
      run: |
        echo "Running tests..."
        pytest tests/ -v --tb=short || true
        echo "Tests completed"

  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: [compilation, linting]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ecplacas-epn:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max