@echo off
chcp 65001 >nul
title ECPlacas 2.0 - Automatizaci√≥n Completa - EPN

:: ==========================================
:: ECPlacas 2.0 - Script de Automatizaci√≥n Windows
:: Proyecto: Construcci√≥n de Software - EPN
:: Desarrollado por: Erick Costa
:: ==========================================

setlocal EnableDelayedExpansion
color 09

echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                    üöÄ ECPlacas 2.0 - EPN üöÄ                        ‚ïë
echo ‚ïë                                                                      ‚ïë
echo ‚ïë  Automatizaci√≥n Completa - Construcci√≥n de Software                ‚ïë
echo ‚ïë  Escuela Polit√©cnica Nacional                                       ‚ïë
echo ‚ïë  Desarrollado por: Erick Costa                                      ‚ïë
echo ‚ïë                                                                      ‚ïë
echo ‚ïë  üíª Tareas del Examen: Compilar | Lint | Tests | Docker            ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

:: Verificar Python
python --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Python no encontrado. Instala Python 3.8+ desde python.org
    pause
    exit /b 1
)

echo ‚úÖ Python detectado
for /f "tokens=2" %%i in ('python --version 2^>^&1') do set PYTHON_VERSION=%%i
echo üêç Versi√≥n: %PYTHON_VERSION%

:: Verificar que estamos en el directorio correcto
if not exist "backend\app.py" (
    echo ‚ùå No se encontr√≥ backend\app.py
    echo üí° Ejecuta este script desde el directorio ra√≠z del proyecto ECPlacas
    pause
    exit /b 1
)

echo ‚úÖ Estructura del proyecto verificada

:: Mostrar men√∫ de opciones
:menu
cls
echo.
echo üìã SELECCIONA LAS TAREAS A EJECUTAR:
echo.
echo 1. üî• EJECUTAR TODO (Examen Completo)
echo 2. üî® Solo Compilaci√≥n
echo 3. üîç Solo Linting
echo 4. üß™ Solo Pruebas
echo 5. üê≥ Solo Docker Build
echo 6. ‚ö° Todo excepto Docker
echo 7. üìä Ver √∫ltimo reporte
echo 8. üßπ Limpiar archivos temporales
echo 9. ‚ùì Ayuda
echo 0. üö™ Salir
echo.

set /p choice="Selecciona una opci√≥n (0-9): "

if "%choice%"=="1" goto :run_all
if "%choice%"=="2" goto :run_compile
if "%choice%"=="3" goto :run_lint
if "%choice%"=="4" goto :run_test
if "%choice%"=="5" goto :run_docker
if "%choice%"=="6" goto :run_no_docker
if "%choice%"=="7" goto :show_report
if "%choice%"=="8" goto :cleanup
if "%choice%"=="9" goto :help
if "%choice%"=="0" goto :exit

echo ‚ùå Opci√≥n inv√°lida
timeout /t 2 >nul
goto :menu

:: ==========================================
:: EJECUCIONES
:: ==========================================

:run_all
echo.
echo üî• EJECUTANDO TODAS LAS TAREAS DEL EXAMEN...
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo.
python scripts/run_exam_tasks.py --all
if errorlevel 1 (
    echo.
    echo ‚ùå Error en la ejecuci√≥n completa
    pause
) else (
    echo.
    echo üéâ Todas las tareas completadas exitosamente
    pause
)
goto :menu

:run_compile
echo.
echo üî® EJECUTANDO SOLO COMPILACI√ìN...
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo.
python scripts/run_exam_tasks.py --compile
pause
goto :menu

:run_lint
echo.
echo üîç EJECUTANDO SOLO LINTING...
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo.
python scripts/run_exam_tasks.py --lint
pause
goto :menu

:run_test
echo.
echo üß™ EJECUTANDO SOLO PRUEBAS...
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo.
python scripts/run_exam_tasks.py --test
pause
goto :menu

:run_docker
echo.
echo üê≥ EJECUTANDO SOLO DOCKER BUILD...
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo.
python scripts/run_exam_tasks.py --docker
pause
goto :menu

:run_no_docker
echo.
echo ‚ö° EJECUTANDO TODO EXCEPTO DOCKER...
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo.
python scripts/run_exam_tasks.py --no-docker
pause
goto :menu

:show_report
echo.
echo üìä √öLTIMO REPORTE DE EJECUCI√ìN:
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo.

:: Buscar el √∫ltimo reporte JSON
for /f "delims=" %%i in ('dir /b /o-d automation_report_*.json 2^>nul') do (
    set "latest_report=%%i"
    goto :found_report
)

echo ‚ö†Ô∏è No se encontraron reportes previos
pause
goto :menu

:found_report
echo üìÑ Archivo: %latest_report%
echo.
python -c "import json; data=json.load(open('%latest_report%')); print('üéØ Score General:', f\"{data['summary']['overall_score']:.1f}%%\"); print('üî® Compilaci√≥n:', '‚úÖ PASS' if data['summary']['compilation_success'] else '‚ùå FAIL'); print('üîç Linting:', f\"{data['summary']['linting_score']:.1f}%%\"); print('üß™ Pruebas:', '‚úÖ PASS' if data['summary']['testing_success'] else '‚ùå FAIL'); print('üê≥ Docker:', '‚úÖ PASS' if data['summary']['docker_success'] else '‚ùå FAIL')"
echo.
pause
goto :menu

:cleanup
echo.
echo üßπ LIMPIANDO ARCHIVOS TEMPORALES...
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo.

:: Limpiar cache Python
if exist "__pycache__" (
    rmdir /s /q __pycache__
    echo ‚úÖ Removido __pycache__
)

if exist "backend\__pycache__" (
    rmdir /s /q backend\__pycache__
    echo ‚úÖ Removido backend\__pycache__
)

if exist "tests\__pycache__" (
    rmdir /s /q tests\__pycache__
    echo ‚úÖ Removido tests\__pycache__
)

:: Limpiar archivos de cobertura
if exist "htmlcov" (
    rmdir /s /q htmlcov
    echo ‚úÖ Removido htmlcov
)

if exist "coverage.xml" (
    del coverage.xml
    echo ‚úÖ Removido coverage.xml
)

if exist ".coverage" (
    del .coverage
    echo ‚úÖ Removido .coverage
)

:: Limpiar archivos de linting
if exist "flake8-report.txt" (
    del flake8-report.txt
    echo ‚úÖ Removido flake8-report.txt
)

:: Limpiar reportes antiguos (mantener √∫ltimos 5)
echo üóÇÔ∏è Limpiando reportes antiguos...
for /f "skip=5 delims=" %%i in ('dir /b /o-d automation_report_*.json 2^>nul') do (
    del "%%i"
    echo ‚úÖ Removido %%i
)

echo.
echo ‚úÖ Limpieza completada
pause
goto :menu

:help
echo.
echo ‚ùì AYUDA - ECPlacas 2.0 Automatizaci√≥n
echo ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
echo.
echo Este script automatiza todas las tareas del examen:
echo.
echo üî® COMPILACI√ìN:
echo    - Verifica sintaxis Python
echo    - Compila m√≥dulos principales
echo    - Verifica imports
echo.
echo üîç LINTING:
echo    - An√°lisis con Flake8
echo    - Verificaci√≥n de formato con Black
echo    - Organizaci√≥n de imports con isort
echo.
echo üß™ PRUEBAS:
echo    - Pruebas unitarias con pytest
echo    - Pruebas de integraci√≥n
echo    - Cobertura de c√≥digo
echo    - Pruebas de rendimiento
echo.
echo üê≥ DOCKER:
echo    - Build de imagen optimizada
echo    - Test b√°sico de la imagen
echo    - Verificaci√≥n de health check
echo.
echo üìä REPORTES:
echo    - Genera reportes JSON detallados
echo    - M√©tricas de rendimiento
echo    - Scores de calidad
echo.
echo üí° CONSEJOS:
echo    - Ejecuta "Todo" para el examen completo
echo    - Revisa los reportes para m√©tricas detalladas
echo    - Usa la limpieza peri√≥dicamente
echo.
pause
goto :menu

:exit
echo.
echo üëã Gracias por usar ECPlacas 2.0 Automatizaci√≥n
echo üéì Escuela Polit√©cnica Nacional
echo üë®‚Äçüíª Desarrollado por: Erick Costa
echo.
pause
exit /b 0

:: ==========================================
:: FUNCIONES AUXILIARES
:: ==========================================

:check_dependencies
echo üîç Verificando dependencias...

:: Verificar pip
python -m pip --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå pip no encontrado
    exit /b 1
)

:: Verificar pytest
python -c "import pytest" >nul 2>&1
if errorlevel 1 (
    echo ‚ö†Ô∏è pytest no encontrado, instalando...
    python -m pip install pytest pytest-cov
)

:: Verificar flake8
python -c "import flake8" >nul 2>&1
if errorlevel 1 (
    echo ‚ö†Ô∏è flake8 no encontrado, instalando...
    python -m pip install flake8
)

echo ‚úÖ Dependencias verificadas
exit /b 0
