# ==========================================
# ECPlacas 2.0 - Docker Compose
# Proyecto: Construcción de Software
# Desarrollado por: Erick Costa
# ==========================================

version: '3.8'

services:
  # ==========================================
  # Aplicación Principal ECPlacas 2.0
  # ==========================================
  ecplacas-app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: ecplacas-app
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - DATABASE_PATH=/app/database/ecplacas.sqlite
      - LOG_LEVEL=INFO
    volumes:
      # Persistir base de datos
      - ./database:/app/database
      # Persistir logs
      - ./logs:/app/logs
      # Persistir configuración
      - ./config:/app/config
      # Persistir backups
      - ./database/backups:/app/database/backups
    ports:
      - "5000:5000"
    networks:
      - ecplacas-network
    depends_on:
      - nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ecplacas.rule=Host(`ecplacas.local`)"
      - "traefik.http.services.ecplacas.loadbalancer.server.port=5000"

  # ==========================================
  # Nginx - Reverse Proxy y Static Files
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: ecplacas-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/sites-available:/etc/nginx/sites-available:ro
      - ./public:/var/www/html/static:ro
      - ./frontend:/var/www/html/frontend:ro
      # SSL certificates (opcional)
      - ./certificates:/etc/nginx/certificates:ro
    networks:
      - ecplacas-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`ecplacas.local`)"
      - "traefik.http.routers.nginx.tls=true"

  # ==========================================
  # Monitor de Sistema (opcional)
  # ==========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: ecplacas-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ecplacas-network
    profiles:
      - monitoring

  # ==========================================
  # Grafana Dashboard (opcional)
  # ==========================================
  grafana:
    image: grafana/grafana:latest
    container_name: ecplacas-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ecplacas_admin_2024
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ecplacas-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # ==========================================
  # Backup Service (opcional)
  # ==========================================
  backup:
    build:
      context: .
      dockerfile: deployment/backup/Dockerfile
    container_name: ecplacas-backup
    restart: unless-stopped
    environment:
      - BACKUP_FREQUENCY=24h
      - BACKUP_RETENTION_DAYS=30
    volumes:
      - ./database:/app/database:ro
      - ./database/backups:/app/backups
      - /etc/localtime:/etc/localtime:ro
    networks:
      - ecplacas-network
    profiles:
      - backup

# ==========================================
# Volúmenes Persistentes
# ==========================================
volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ==========================================
# Red Interna
# ==========================================
networks:
  ecplacas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==========================================
# COMANDOS ÚTILES
# ==========================================

# Iniciar todos los servicios:
# docker-compose up -d

# Iniciar solo la aplicación principal:
# docker-compose up -d ecplacas-app nginx

# Iniciar con monitoreo:
# docker-compose --profile monitoring up -d

# Ver logs en tiempo real:
# docker-compose logs -f ecplacas-app

# Escalar la aplicación:
# docker-compose up -d --scale ecplacas-app=3

# Parar todos los servicios:
# docker-compose down

# Parar y eliminar volúmenes:
# docker-compose down -v

# Rebuild y restart:
# docker-compose up -d --build

# Ejecutar comandos en el contenedor:
# docker-compose exec ecplacas-app bash
# docker-compose exec ecplacas-app python scripts/setup.py

# Ver estado de servicios:
# docker-compose ps

# Ver recursos utilizados:
# docker-compose top

# ==========================================
# CONFIGURACIÓN DE DESARROLLO
# ==========================================

# Para desarrollo, crear docker-compose.override.yml:
# version: '3.8'
# services:
#   ecplacas-app:
#     volumes:
#       - .:/app
#     environment:
#       - FLASK_ENV=development
#       - FLASK_DEBUG=true
#     ports:
#       - "5000:5000"

# ==========================================
# CONFIGURACIÓN DE PRODUCCIÓN
# ==========================================

# Para producción:
# 1. Usar secrets para variables sensibles
# 2. Configurar SSL certificates
# 3. Implementar health checks robustos
# 4. Configurar logging centralizado
# 5. Usar load balancer si es necesario
# 6. Configurar backup automático
# 7. Implementar monitoreo con alertas

# Ejemplo de production docker-compose:
# version: '3.8'
# services:
#   ecplacas-app:
#     image: ecplacas-2.0:latest
#     deploy:
#       replicas: 3
#       resources:
#         limits:
#           memory: 512M
#         reservations:
#           memory: 256M
#     secrets:
#       - db_password
#       - jwt_secret
# 
# secrets:
#   db_password:
#     external: true
#   jwt_secret:
#     external: true

# ==========================================
# INFORMACIÓN DEL PROYECTO
# ==========================================

# Proyecto: ECPlacas 2.0
# Versión: 2.0.0
# Autor: Erick Costa
# Construcción de Software
# Temática: Futurista - Azul Neon
# Fecha: Diciembre 2024
